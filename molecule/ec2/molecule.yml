---
dependency:
  name: galaxy
driver:
  name: ec2
lint: |
  set -e
  yamllint .
  ansible-lint
platforms:
  # https://docs.aws.amazon.com/en_us/AWSEC2/latest/UserGuide/finding-an-ami.html
  - name: "${TEST_INSTANCE_PREFIX:-instance}_${TEST_DISTRO:-centos_latest}_${TOX_ENVNAME:-ec2}"
    image: ${TEST_EC2_AMI:-ami-dd3c0f36}
    instance_type: t2.micro
    vpc_subnet_id: ${TEST_EC2_VPC_SUBNET_ID:-""}
    root_device:
      device_name: ${TEST_EC2_ROOT_DEVICE:-""}
    groups:
      - ${TEST_DISTRO:-centos_latest}_ec2
provisioner:
  name: ansible
  config_options:
    defaults:
      interpreter_python: auto_silent
      callback_whitelist: profile_tasks, timer, yaml
      stdout_callback: yaml
  playbooks:
    ec2:
      create: ${TEST_CREATE:-../resources/ec2/create.yml}
      destroy: ${TEST_DESTROY:-../resources/ec2/destroy.yml}
    converge: ${TEST_CONVERGE:-../resources/converge.yml}
    verify: ${TEST_VERIFY:-../resources/verify.yml}
  inventory:
    group_vars:
      amazonlinux_latest_ec2:
        bootstrap_user: ec2-user
      centos_latest_ec2:
        bootstrap_user: centos
      debian_latest_ec2:
        bootstrap_user: admin
      fedora_latest_ec2:
        bootstrap_user: fedora
      redhat_latest_ec2:
        bootstrap_user: ec2-user
      ubuntu_latest_ec2:
        bootstrap_user: ubuntu
scenario:
  name: ec2
verifier:
  name: ansible
